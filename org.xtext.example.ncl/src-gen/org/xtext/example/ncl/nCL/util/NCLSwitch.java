/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.ncl.nCL.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.ncl.nCL.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.ncl.nCL.NCLPackage
 * @generated
 */
public class NCLSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NCLPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NCLSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = NCLPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case NCLPackage.TOP_LEVEL_CP:
      {
        TopLevelCP topLevelCP = (TopLevelCP)theEObject;
        T result = caseTopLevelCP(topLevelCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.HOMOCOM_CP:
      {
        HomocomCP homocomCP = (HomocomCP)theEObject;
        T result = caseHomocomCP(homocomCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.META_MODEL_TYPE_CS:
      {
        metaModelTypeCS metaModelTypeCS = (metaModelTypeCS)theEObject;
        T result = casemetaModelTypeCS(metaModelTypeCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.HOMO_STATEMENT_CS:
      {
        HomoStatementCS homoStatementCS = (HomoStatementCS)theEObject;
        T result = caseHomoStatementCS(homoStatementCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.HOMO_CONDITION_CS:
      {
        HomoConditionCS homoConditionCS = (HomoConditionCS)theEObject;
        T result = caseHomoConditionCS(homoConditionCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.HETECOM_CP:
      {
        HetecomCP hetecomCP = (HetecomCP)theEObject;
        T result = caseHetecomCP(hetecomCP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.HETE_STATEMENT_CS:
      {
        HeteStatementCS heteStatementCS = (HeteStatementCS)theEObject;
        T result = caseHeteStatementCS(heteStatementCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case NCLPackage.HETE_CONDITION_CS:
      {
        HeteConditionCS heteConditionCS = (HeteConditionCS)theEObject;
        T result = caseHeteConditionCS(heteConditionCS);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Top Level CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Top Level CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTopLevelCP(TopLevelCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Homocom CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Homocom CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHomocomCP(HomocomCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>meta Model Type CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>meta Model Type CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemetaModelTypeCS(metaModelTypeCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Homo Statement CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Homo Statement CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHomoStatementCS(HomoStatementCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Homo Condition CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Homo Condition CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHomoConditionCS(HomoConditionCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hetecom CP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hetecom CP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHetecomCP(HetecomCP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hete Statement CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hete Statement CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHeteStatementCS(HeteStatementCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hete Condition CS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hete Condition CS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHeteConditionCS(HeteConditionCS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //NCLSwitch
