/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.ncl.nCL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.ncl.nCL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NCLFactoryImpl extends EFactoryImpl implements NCLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NCLFactory init()
  {
    try
    {
      NCLFactory theNCLFactory = (NCLFactory)EPackage.Registry.INSTANCE.getEFactory(NCLPackage.eNS_URI);
      if (theNCLFactory != null)
      {
        return theNCLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NCLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NCLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NCLPackage.TOP_LEVEL_CP: return createTopLevelCP();
      case NCLPackage.HOMOCOM_CP: return createHomocomCP();
      case NCLPackage.META_MODEL_TYPE_CS: return createmetaModelTypeCS();
      case NCLPackage.HOMO_STATEMENT_CS: return createHomoStatementCS();
      case NCLPackage.HOMO_CONDITION_CS: return createHomoConditionCS();
      case NCLPackage.HETECOM_CP: return createHetecomCP();
      case NCLPackage.HETE_STATEMENT_CS: return createHeteStatementCS();
      case NCLPackage.HETE_CONDITION_CS: return createHeteConditionCS();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TopLevelCP createTopLevelCP()
  {
    TopLevelCPImpl topLevelCP = new TopLevelCPImpl();
    return topLevelCP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HomocomCP createHomocomCP()
  {
    HomocomCPImpl homocomCP = new HomocomCPImpl();
    return homocomCP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public metaModelTypeCS createmetaModelTypeCS()
  {
    metaModelTypeCSImpl metaModelTypeCS = new metaModelTypeCSImpl();
    return metaModelTypeCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HomoStatementCS createHomoStatementCS()
  {
    HomoStatementCSImpl homoStatementCS = new HomoStatementCSImpl();
    return homoStatementCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HomoConditionCS createHomoConditionCS()
  {
    HomoConditionCSImpl homoConditionCS = new HomoConditionCSImpl();
    return homoConditionCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HetecomCP createHetecomCP()
  {
    HetecomCPImpl hetecomCP = new HetecomCPImpl();
    return hetecomCP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HeteStatementCS createHeteStatementCS()
  {
    HeteStatementCSImpl heteStatementCS = new HeteStatementCSImpl();
    return heteStatementCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HeteConditionCS createHeteConditionCS()
  {
    HeteConditionCSImpl heteConditionCS = new HeteConditionCSImpl();
    return heteConditionCS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NCLPackage getNCLPackage()
  {
    return (NCLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NCLPackage getPackage()
  {
    return NCLPackage.eINSTANCE;
  }

} //NCLFactoryImpl
