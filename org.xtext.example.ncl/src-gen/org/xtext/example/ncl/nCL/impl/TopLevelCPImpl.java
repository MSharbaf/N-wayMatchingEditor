/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.ncl.nCL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.ocl.xtext.basecs.ImportCS;
import org.eclipse.ocl.xtext.completeoclcs.impl.CompleteOCLDocumentCSImpl;
import org.eclipse.ocl.xtext.completeoclcs.ContextDeclCS;


import org.xtext.example.ncl.nCL.HetecomCP;
import org.xtext.example.ncl.nCL.HomocomCP;
import org.xtext.example.ncl.nCL.NCLPackage;
import org.xtext.example.ncl.nCL.TopLevelCP;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Level CP</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.ncl.nCL.impl.TopLevelCPImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.ncl.nCL.impl.TopLevelCPImpl#getOwnedImports <em>Owned Imports</em>}</li>
 *   <li>{@link org.xtext.example.ncl.nCL.impl.TopLevelCPImpl#getOwnedHomocoms <em>Owned Homocoms</em>}</li>
 *   <li>{@link org.xtext.example.ncl.nCL.impl.TopLevelCPImpl#getOwnedHetecoms <em>Owned Hetecoms</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopLevelCPImpl extends CompleteOCLDocumentCSImpl implements TopLevelCP
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getOwnedImports() <em>Owned Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedImports()
   * @generated
   * @ordered
   */
  protected EList<ImportCS> ownedImports;

  /**
   * The cached value of the '{@link #getOwnedHomocoms() <em>Owned Homocoms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedHomocoms()
   * @generated
   * @ordered
   */
  protected EList<HomocomCP> ownedHomocoms;

  /**
   * The cached value of the '{@link #getOwnedHetecoms() <em>Owned Hetecoms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOwnedHetecoms()
   * @generated
   * @ordered
   */
  protected EList<HetecomCP> ownedHetecoms;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TopLevelCPImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NCLPackage.Literals.TOP_LEVEL_CP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NCLPackage.TOP_LEVEL_CP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ImportCS> getOwnedImports()
  {
    if (ownedImports == null)
    {
      ownedImports = new EObjectContainmentEList<ImportCS>(ImportCS.class, this, NCLPackage.TOP_LEVEL_CP__OWNED_IMPORTS);
    }
    return ownedImports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<HomocomCP> getOwnedHomocoms()
  {
    if (ownedHomocoms == null)
    {
      ownedHomocoms = new EObjectContainmentEList<HomocomCP>(HomocomCP.class, this, NCLPackage.TOP_LEVEL_CP__OWNED_HOMOCOMS);
    }
    return ownedHomocoms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<HetecomCP> getOwnedHetecoms()
  {
    if (ownedHetecoms == null)
    {
      ownedHetecoms = new EObjectContainmentEList<HetecomCP>(HetecomCP.class, this, NCLPackage.TOP_LEVEL_CP__OWNED_HETECOMS);
    }
    return ownedHetecoms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NCLPackage.TOP_LEVEL_CP__OWNED_IMPORTS:
        return ((InternalEList<?>)getOwnedImports()).basicRemove(otherEnd, msgs);
      case NCLPackage.TOP_LEVEL_CP__OWNED_HOMOCOMS:
        return ((InternalEList<?>)getOwnedHomocoms()).basicRemove(otherEnd, msgs);
      case NCLPackage.TOP_LEVEL_CP__OWNED_HETECOMS:
        return ((InternalEList<?>)getOwnedHetecoms()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NCLPackage.TOP_LEVEL_CP__NAME:
        return getName();
      case NCLPackage.TOP_LEVEL_CP__OWNED_IMPORTS:
        return getOwnedImports();
      case NCLPackage.TOP_LEVEL_CP__OWNED_HOMOCOMS:
        return getOwnedHomocoms();
      case NCLPackage.TOP_LEVEL_CP__OWNED_HETECOMS:
        return getOwnedHetecoms();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NCLPackage.TOP_LEVEL_CP__NAME:
        setName((String)newValue);
        return;
      case NCLPackage.TOP_LEVEL_CP__OWNED_IMPORTS:
        getOwnedImports().clear();
        getOwnedImports().addAll((Collection<? extends ImportCS>)newValue);
        return;
      case NCLPackage.TOP_LEVEL_CP__OWNED_HOMOCOMS:
        getOwnedHomocoms().clear();
        getOwnedHomocoms().addAll((Collection<? extends HomocomCP>)newValue);
        return;
      case NCLPackage.TOP_LEVEL_CP__OWNED_HETECOMS:
        getOwnedHetecoms().clear();
        getOwnedHetecoms().addAll((Collection<? extends HetecomCP>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NCLPackage.TOP_LEVEL_CP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case NCLPackage.TOP_LEVEL_CP__OWNED_IMPORTS:
        getOwnedImports().clear();
        return;
      case NCLPackage.TOP_LEVEL_CP__OWNED_HOMOCOMS:
        getOwnedHomocoms().clear();
        return;
      case NCLPackage.TOP_LEVEL_CP__OWNED_HETECOMS:
        getOwnedHetecoms().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NCLPackage.TOP_LEVEL_CP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case NCLPackage.TOP_LEVEL_CP__OWNED_IMPORTS:
        return ownedImports != null && !ownedImports.isEmpty();
      case NCLPackage.TOP_LEVEL_CP__OWNED_HOMOCOMS:
        return ownedHomocoms != null && !ownedHomocoms.isEmpty();
      case NCLPackage.TOP_LEVEL_CP__OWNED_HETECOMS:
        return ownedHetecoms != null && !ownedHetecoms.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TopLevelCPImpl
