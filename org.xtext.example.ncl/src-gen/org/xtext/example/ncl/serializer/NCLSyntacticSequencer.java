/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.ncl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.ncl.services.NCLGrammarAccess;

@SuppressWarnings("all")
public class NCLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected NCLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_HeteConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8;
	protected AbstractElementAlias match_HeteConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1;
	protected AbstractElementAlias match_HeteConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q;
	protected AbstractElementAlias match_HeteConditionCS___LeftParenthesisKeyword_1_6_4_2_0_RightParenthesisKeyword_1_6_4_2_1__q;
	protected AbstractElementAlias match_HeteStatementCS_NotKeyword_0_q;
	protected AbstractElementAlias match_HeteStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q;
	protected AbstractElementAlias match_HetecomCP___ExtendsKeyword_5_0_UnrestrictedNameParserRuleCall_5_1___CommaKeyword_5_2_0_UnrestrictedNameParserRuleCall_5_2_1__a__q;
	protected AbstractElementAlias match_HomoConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8;
	protected AbstractElementAlias match_HomoConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1;
	protected AbstractElementAlias match_HomoConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q;
	protected AbstractElementAlias match_HomoStatementCS_NotKeyword_0_q;
	protected AbstractElementAlias match_HomoStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q;
	protected AbstractElementAlias match_HomocomCP___ExtendsKeyword_2_0_UnrestrictedNameParserRuleCall_2_1___CommaKeyword_2_2_0_UnrestrictedNameParserRuleCall_2_2_1__a__q;
	protected AbstractElementAlias match_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q;
	protected AbstractElementAlias match_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (NCLGrammarAccess) access;
		match_HeteConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getEqualsSignKeyword_0_3_2()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getEqualsSignLessThanSignKeyword_0_3_6()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getExclamationMarkKeyword_0_3_4()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getGreaterThanSignEqualsSignKeyword_0_3_5()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getGreaterThanSignKeyword_0_3_0()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getINKeyword_0_3_7()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getLessThanSignGreaterThanSignKeyword_0_3_3()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getLessThanSignKeyword_0_3_1()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getNotINKeyword_0_3_8()));
		match_HeteConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getIsContainKeyword_1_0_4()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getIsEmptyKeyword_1_0_3()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getIsEqualKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getIsEquivalentKeyword_1_0_5()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getIsFalseKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getIsTrueKeyword_1_0_1()));
		match_HeteConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getLeftParenthesisKeyword_1_5_2_0()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getRightParenthesisKeyword_1_5_2_1()));
		match_HeteConditionCS___LeftParenthesisKeyword_1_6_4_2_0_RightParenthesisKeyword_1_6_4_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getLeftParenthesisKeyword_1_6_4_2_0()), new TokenAlias(false, false, grammarAccess.getHeteConditionCSAccess().getRightParenthesisKeyword_1_6_4_2_1()));
		match_HeteStatementCS_NotKeyword_0_q = new TokenAlias(false, true, grammarAccess.getHeteStatementCSAccess().getNotKeyword_0());
		match_HeteStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getHeteStatementCSAccess().getAndKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getHeteStatementCSAccess().getOrKeyword_1_0_0()));
		match_HetecomCP___ExtendsKeyword_5_0_UnrestrictedNameParserRuleCall_5_1___CommaKeyword_5_2_0_UnrestrictedNameParserRuleCall_5_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getHetecomCPAccess().getExtendsKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getHetecomCPAccess().getUnrestrictedNameParserRuleCall_5_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getHetecomCPAccess().getCommaKeyword_5_2_0()), new TokenAlias(false, false, grammarAccess.getHetecomCPAccess().getUnrestrictedNameParserRuleCall_5_2_1())));
		match_HomoConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getEqualsSignKeyword_0_3_2()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getEqualsSignLessThanSignKeyword_0_3_6()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getExclamationMarkKeyword_0_3_4()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getGreaterThanSignEqualsSignKeyword_0_3_5()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getGreaterThanSignKeyword_0_3_0()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getINKeyword_0_3_7()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getLessThanSignGreaterThanSignKeyword_0_3_3()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getLessThanSignKeyword_0_3_1()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getNotINKeyword_0_3_8()));
		match_HomoConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getIsContainKeyword_1_0_4()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getIsEmptyKeyword_1_0_3()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getIsEqualKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getIsEquivalentKeyword_1_0_5()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getIsFalseKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getIsTrueKeyword_1_0_1()));
		match_HomoConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getLeftParenthesisKeyword_1_5_2_0()), new TokenAlias(false, false, grammarAccess.getHomoConditionCSAccess().getRightParenthesisKeyword_1_5_2_1()));
		match_HomoStatementCS_NotKeyword_0_q = new TokenAlias(false, true, grammarAccess.getHomoStatementCSAccess().getNotKeyword_0());
		match_HomoStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getHomoStatementCSAccess().getAndKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getHomoStatementCSAccess().getOrKeyword_1_0_0()));
		match_HomocomCP___ExtendsKeyword_2_0_UnrestrictedNameParserRuleCall_2_1___CommaKeyword_2_2_0_UnrestrictedNameParserRuleCall_2_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getHomocomCPAccess().getExtendsKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getHomocomCPAccess().getUnrestrictedNameParserRuleCall_2_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getHomocomCPAccess().getCommaKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getHomocomCPAccess().getUnrestrictedNameParserRuleCall_2_2_1())));
		match_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getMultiplicityCSAccess().getVerticalLineQuestionMarkKeyword_2_0());
		match_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_1_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getUnrestrictedNameRule())
			return getUnrestrictedNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * UnrestrictedName returns ecore::EString: 	EssentialOCLUnrestrictedName;
	 */
	protected String getUnrestrictedNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_HeteConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8.equals(syntax))
				emit_HeteConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HeteConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1.equals(syntax))
				emit_HeteConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HeteConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q.equals(syntax))
				emit_HeteConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HeteConditionCS___LeftParenthesisKeyword_1_6_4_2_0_RightParenthesisKeyword_1_6_4_2_1__q.equals(syntax))
				emit_HeteConditionCS___LeftParenthesisKeyword_1_6_4_2_0_RightParenthesisKeyword_1_6_4_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HeteStatementCS_NotKeyword_0_q.equals(syntax))
				emit_HeteStatementCS_NotKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HeteStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q.equals(syntax))
				emit_HeteStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HetecomCP___ExtendsKeyword_5_0_UnrestrictedNameParserRuleCall_5_1___CommaKeyword_5_2_0_UnrestrictedNameParserRuleCall_5_2_1__a__q.equals(syntax))
				emit_HetecomCP___ExtendsKeyword_5_0_UnrestrictedNameParserRuleCall_5_1___CommaKeyword_5_2_0_UnrestrictedNameParserRuleCall_5_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HomoConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8.equals(syntax))
				emit_HomoConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HomoConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1.equals(syntax))
				emit_HomoConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HomoConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q.equals(syntax))
				emit_HomoConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HomoStatementCS_NotKeyword_0_q.equals(syntax))
				emit_HomoStatementCS_NotKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HomoStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q.equals(syntax))
				emit_HomoStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HomocomCP___ExtendsKeyword_2_0_UnrestrictedNameParserRuleCall_2_1___CommaKeyword_2_2_0_UnrestrictedNameParserRuleCall_2_2_1__a__q.equals(syntax))
				emit_HomocomCP___ExtendsKeyword_2_0_UnrestrictedNameParserRuleCall_2_1___CommaKeyword_2_2_0_UnrestrictedNameParserRuleCall_2_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q.equals(syntax))
				emit_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         '>' | 
	  *         '<' | 
	  *         '=' | 
	  *         '<>' | 
	  *         '!' | 
	  *         '>=' | 
	  *         '=<' | 
	  *         'IN' | 
	  *         'NotIN'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElementA=FQN (ambiguity) ownedElementB=FQN
	 */
	protected void emit_HeteConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'isEqual' | 
	  *         'isTrue' | 
	  *         'isFalse' | 
	  *         'isEmpty' | 
	  *         'isContain' | 
	  *         'isEquivalent'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ownedElement+=FQN
	 */
	protected void emit_HeteConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElement+=FQN (ambiguity) ')' (rule end)
	 *     ownedElement+=FQN (ambiguity) ',' ownedElement+=FQN
	 *     ownedElement+=FQN (ambiguity) '.' ownedElement+=FQN
	 */
	protected void emit_HeteConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElement+=FQN (ambiguity) ')' (rule end)
	 *     ownedElement+=FQN (ambiguity) ',' ownedElement+=FQN
	 *     ownedElement+=FQN (ambiguity) '.' ownedElement+=FQN
	 */
	protected void emit_HeteConditionCS___LeftParenthesisKeyword_1_6_4_2_0_RightParenthesisKeyword_1_6_4_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'not'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('or' | 'and')? ownedConditions+=HeteConditionCS
	 */
	protected void emit_HeteStatementCS_NotKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('or' | 'and')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'not'? (ambiguity) ownedConditions+=HeteConditionCS
	 *     ownedConditions+=HeteConditionCS (ambiguity) ownedConditions+=HeteConditionCS
	 */
	protected void emit_HeteStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedModels+=metaModelTypeCS (ambiguity) '{' 'compareModels' ':' ownedStatements+=HeteStatementCS
	 */
	protected void emit_HetecomCP___ExtendsKeyword_5_0_UnrestrictedNameParserRuleCall_5_1___CommaKeyword_5_2_0_UnrestrictedNameParserRuleCall_5_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '>' | 
	  *         '<' | 
	  *         '=' | 
	  *         '<>' | 
	  *         '!' | 
	  *         '>=' | 
	  *         '=<' | 
	  *         'IN' | 
	  *         'NotIN'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElementA=FQN (ambiguity) ownedElementB=FQN
	 */
	protected void emit_HomoConditionCS_EqualsSignKeyword_0_3_2_or_EqualsSignLessThanSignKeyword_0_3_6_or_ExclamationMarkKeyword_0_3_4_or_GreaterThanSignEqualsSignKeyword_0_3_5_or_GreaterThanSignKeyword_0_3_0_or_INKeyword_0_3_7_or_LessThanSignGreaterThanSignKeyword_0_3_3_or_LessThanSignKeyword_0_3_1_or_NotINKeyword_0_3_8(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'isEqual' | 
	  *         'isTrue' | 
	  *         'isFalse' | 
	  *         'isEmpty' | 
	  *         'isContain' | 
	  *         'isEquivalent'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ownedElement+=FQN
	 */
	protected void emit_HomoConditionCS_IsContainKeyword_1_0_4_or_IsEmptyKeyword_1_0_3_or_IsEqualKeyword_1_0_0_or_IsEquivalentKeyword_1_0_5_or_IsFalseKeyword_1_0_2_or_IsTrueKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedElement+=FQN (ambiguity) ')' (rule end)
	 *     ownedElement+=FQN (ambiguity) '.' ownedElement+=FQN
	 */
	protected void emit_HomoConditionCS___LeftParenthesisKeyword_1_5_2_0_RightParenthesisKeyword_1_5_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'not'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('or' | 'and')? ownedConditions+=HomoConditionCS
	 */
	protected void emit_HomoStatementCS_NotKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('or' | 'and')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'not'? (ambiguity) ownedConditions+=HomoConditionCS
	 *     ownedConditions+=HomoConditionCS (ambiguity) ownedConditions+=HomoConditionCS
	 */
	protected void emit_HomoStatementCS___AndKeyword_1_0_1_or_OrKeyword_1_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' UnrestrictedName (',' UnrestrictedName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ownedMetaModels+=metaModelTypeCS (ambiguity) '{' 'compareModels' ':' ownedStatements+=HomoStatementCS
	 */
	protected void emit_HomocomCP___ExtendsKeyword_2_0_UnrestrictedNameParserRuleCall_2_1___CommaKeyword_2_2_0_UnrestrictedNameParserRuleCall_2_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '|?'?
	 *
	 * This ambiguous syntax occurs at:
	 *     lowerBound=LOWER (ambiguity) ']' (rule end)
	 *     stringBounds='*' (ambiguity) ']' (rule end)
	 *     stringBounds='+' (ambiguity) ']' (rule end)
	 *     stringBounds='?' (ambiguity) ']' (rule end)
	 *     upperBound=UPPER (ambiguity) ']' (rule end)
	 */
	protected void emit_MultiplicityCS_VerticalLineQuestionMarkKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name='Tuple' (ambiguity) (rule end)
	 *     name='Tuple' (ambiguity) ownedMultiplicity=MultiplicityCS
	 */
	protected void emit_TupleTypeCS___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
